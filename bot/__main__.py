import asyncio
import json
import logging
import os
import tempfile
from pathlib import Path
from typing import List

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
    FSInputFile,
)

from fpdf import FPDF
from .config import config

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(level=logging.INFO)

BASE_DIR = Path(__file__).parent          # ‚Ä¶/bot
IMG_DIR  = BASE_DIR.parent / "images"     # ‚Ä¶/images
QUIZ_PATH = BASE_DIR / "data" / "quizzes.json"

with QUIZ_PATH.open(encoding="utf-8") as f:
    QUIZZES: dict[str, List[dict]] = json.load(f)

bot = Bot(
    token=config.bot_token,
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN),
)
dp = Dispatcher()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FSM ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class QuizState(StatesGroup):
    waiting_for_answer = State()

class ReportChoice(StatesGroup):
    waiting = State()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ PDF helper ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_pdf(lines: List[str], image_paths: List[str]) -> str:
    pdf = FPDF(format="A4")
    pdf.set_auto_page_break(True, margin=15)
    for text, img in zip(lines, image_paths):
        pdf.add_page()
        pdf.set_font("Helvetica", size=12)
        pdf.multi_cell(0, 10, text)
        if img and Path(img).exists():
            pdf.ln(5)
            pdf.image(img, w=170)
    tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
    pdf.output(tmp.name)
    return tmp.name

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ö—ç–Ω–¥–ª–µ—Ä—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message(Command("start"))
async def cmd_start(msg: Message) -> None:
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=t, callback_data=f"topic:{t}")]
            for t in QUIZZES.keys()
        ]
    )
    await msg.answer("*–ü—Ä–∏–≤–µ—Ç!*\n–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:", reply_markup=kb)

@dp.callback_query(lambda cb: cb.data.startswith("topic:"))
async def choose_topic(cb: CallbackQuery, state: FSMContext) -> None:
    topic = cb.data.split(":", 1)[1]
    await state.update_data(topic=topic, idx=0, score=0, results=[])
    await ask_question(cb.message, state)

async def ask_question(msg: Message, state: FSMContext) -> None:
    data   = await state.get_data()
    topic  = data["topic"]
    idx    = data["idx"]
    total  = len(QUIZZES[topic])
    q      = QUIZZES[topic][idx]

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=opt, callback_data=f"ans:{i}")]
            for i, opt in enumerate(q["options"])
        ]
    )
    caption = f"‚ùì_–í–æ–ø—Ä–æ—Å {idx + 1} –∏–∑ {total}_\n\n*{q['question']}*"

    if fname := q.get("image_file"):
        file_path = IMG_DIR / fname
        if file_path.exists():
            await msg.answer_photo(
                FSInputFile(file_path),
                caption=caption,
                reply_markup=kb,
                parse_mode=ParseMode.MARKDOWN,
            )
        else:
            logging.warning("–ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: %s", file_path)
            await msg.answer(caption, reply_markup=kb)
    else:
        await msg.answer(caption, reply_markup=kb)

    await state.set_state(QuizState.waiting_for_answer)

@dp.callback_query(QuizState.waiting_for_answer)
async def handle_answer(cb: CallbackQuery, state: FSMContext) -> None:
    data   = await state.get_data()
    topic, idx = data["topic"], data["idx"]
    q      = QUIZZES[topic][idx]

    chosen  = int(cb.data.split(":", 1)[1])
    correct = chosen == q["correct"]

    data["results"].append({"idx": idx, "correct": correct})
    score = data["score"] + int(correct)
    next_idx = idx + 1

    await cb.answer("‚úÖ –í–µ—Ä–Ω–æ!" if correct else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ")

    if next_idx < len(QUIZZES[topic]):
        await state.update_data(idx=next_idx, score=score, results=data["results"])
        await ask_question(cb.message, state)
        return

    # ‚îÄ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ + –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç—á—ë—Ç–∞ ‚îÄ
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="üìù –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç", callback_data="report:text"),
            InlineKeyboardButton(text="üìÑ PDF —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏", callback_data="report:pdf"),
        ]]
    )
    await cb.message.answer(
        f"üèÅ –ö–æ–Ω–µ—Ü!\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: *{score}* –∏–∑ *{len(data['results'])}*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á—ë—Ç–∞:",
        reply_markup=kb,
    )
    await state.update_data(score=score)
    await state.set_state(ReportChoice.waiting)

# ‚îÄ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç ‚îÄ
@dp.callback_query(lambda c: c.data == "report:text", ReportChoice.waiting)
async def send_text_report(cb: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    lines = []
    for i, item in enumerate(data["results"], 1):
        q_obj = QUIZZES[data["topic"]][item["idx"]]
        mark  = "‚úÖ" if item["correct"] else "‚ùå"
        right = q_obj["options"][q_obj["correct"]]
        lines.append(f"{mark} *–í–æ–ø—Ä–æ—Å {i}:* {q_obj['question']}\n‚ÄÉ*–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç:* _{right}_")
    await cb.message.answer("\n\n".join(lines))
    await state.clear()

# ‚îÄ PDF-–æ—Ç—á—ë—Ç ‚îÄ
@dp.callback_query(lambda c: c.data == "report:pdf", ReportChoice.waiting)
async def send_pdf_report(cb: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    report_lines, img_paths = [], []

    for i, item in enumerate(data["results"], 1):
        q_obj = QUIZZES[data["topic"]][item["idx"]]
        # —Å–ª–æ–≤–∞ –≤–º–µ—Å—Ç–æ —ç–º–æ–¥–∑–∏
        mark_pdf  = "–í–ï–†–ù–û" if item["correct"] else "–ù–ï–í–ï–†–ù–û"
        right = q_obj["options"][q_obj["correct"]]
        report_lines.append(f"{mark_pdf}: –í–æ–ø—Ä–æ—Å {i}: {q_obj['question']} ‚Äî –æ—Ç–≤–µ—Ç: {right}")
        img_paths.append(str(IMG_DIR / q_obj["image_file"]) if q_obj.get("image_file") else None)

    pdf_path = build_pdf(report_lines, img_paths)
    await cb.message.answer_document(open(pdf_path, "rb"), caption="PDF-–æ—Ç—á—ë—Ç")
    os.remove(pdf_path)
    await state.clear()

# ‚îÄ –∑–∞–ø—É—Å–∫ ‚îÄ
async def main() -> None:
    if not config.bot_token:
        raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ .env")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
