import asyncio, json, logging, os, tempfile, unicodedata
from pathlib import Path
from typing import List

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup,
    Message, FSInputFile,
)

from fpdf import FPDF
from fontTools.ttLib import TTLibError
from .config import config

# ‚îÄ‚îÄ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(level=logging.INFO)
BASE_DIR = Path(__file__).parent
IMG_DIR  = BASE_DIR.parent / "images"
QUIZ_PATH = BASE_DIR / "data" / "quizzes.json"

with QUIZ_PATH.open(encoding="utf-8") as f:
    QUIZZES: dict[str, List[dict]] = json.load(f)

# ‚îÄ‚îÄ –ø–æ–∏—Å–∫ —à—Ä–∏—Ñ—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CANDIDATE_FONTS = [
    BASE_DIR / "fonts" / "DejaVuSans.ttf",
    Path("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf"),
    Path.home() / ".fonts" / "DejaVuSans.ttf",
]
FONT_PATH: Path | None = next((p for p in CANDIDATE_FONTS if p.exists()), None)
if FONT_PATH:
    logging.info("Unicode-—à—Ä–∏—Ñ—Ç –Ω–∞–π–¥–µ–Ω: %s", FONT_PATH)
else:
    logging.warning("Unicode-—à—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî PDF –±—É–¥–µ—Ç ASCII-only")

# ‚îÄ‚îÄ bot ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
bot = Bot(token=config.bot_token,
          default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher()

# ‚îÄ‚îÄ FSM ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class QuizState(StatesGroup):
    waiting_for_answer = State()
class ReportChoice(StatesGroup):
    waiting = State()

# ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def ascii_fallback(txt: str) -> str:
    return unicodedata.normalize("NFKD", txt).encode("ascii", "ignore").decode("ascii")

def build_pdf(lines: List[str], image_paths: List[str]) -> str:
    pdf = FPDF(format="A4")
    use_unicode = False
    font_name = "Helvetica"

    if FONT_PATH:
        try:
            pdf.add_font("DejaVu", "", str(FONT_PATH))  # uni=True –Ω–µ –Ω—É–∂–µ–Ω
            font_name = "DejaVu"
            use_unicode = True
        except TTLibError as e:
            logging.warning("–§–∞–π–ª —à—Ä–∏—Ñ—Ç–∞ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω (%s) ‚Äî ASCII fallback.", e)

    pdf.set_auto_page_break(True, margin=15)

    for text, img in zip(lines, image_paths):
        pdf.add_page()
        pdf.set_font(font_name, size=12)
        pdf.multi_cell(0, 10, text if use_unicode else ascii_fallback(text))
        if img and Path(img).exists():
            pdf.ln(5); pdf.image(img, w=170)

    tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
    pdf.output(tmp.name)
    return tmp.name

# ‚îÄ‚îÄ /start ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message(Command("start"))
async def cmd_start(msg: Message) -> None:
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=t, callback_data=f"topic:{t}")]
                         for t in QUIZZES.keys()])
    await msg.answer("*–ü—Ä–∏–≤–µ—Ç!* –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:", reply_markup=kb)

# ‚îÄ‚îÄ –≤—ã–±–æ—Ä —Ç–µ–º—ã –∏ –≤–æ–ø—Ä–æ—Å—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.callback_query(lambda cb: cb.data.startswith("topic:"))
async def choose_topic(cb: CallbackQuery, state: FSMContext) -> None:
    await state.update_data(topic=cb.data.split(":", 1)[1], idx=0, score=0, results=[])
    await ask_question(cb.message, state)

async def ask_question(msg: Message, state: FSMContext) -> None:
    d = await state.get_data(); t, i = d["topic"], d["idx"]; q = QUIZZES[t][i]
    total = len(QUIZZES[t])
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=o, callback_data=f"ans:{n}")]
        for n, o in enumerate(q["options"])])
    caption = f"‚ùì_–í–æ–ø—Ä–æ—Å {i+1} –∏–∑ {total}_\n\n*{q['question']}*"
    img = IMG_DIR / q.get("image_file", "")
    if img.exists():
        await msg.answer_photo(FSInputFile(img), caption=caption,
                               reply_markup=kb, parse_mode=ParseMode.MARKDOWN)
    else:
        await msg.answer(caption, reply_markup=kb)
    await state.set_state(QuizState.waiting_for_answer)

@dp.callback_query(QuizState.waiting_for_answer)
async def handle_answer(cb: CallbackQuery, state: FSMContext) -> None:
    d = await state.get_data(); t, i = d["topic"], d["idx"]; q = QUIZZES[t][i]
    correct = int(cb.data.split(":", 1)[1]) == q["correct"]
    d["results"].append({"idx": i, "correct": correct})
    score = d["score"] + int(correct); next_i = i + 1
    await cb.answer("‚úÖ –í–µ—Ä–Ω–æ!" if correct else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ")
    if next_i < len(QUIZZES[t]):
        await state.update_data(idx=next_i, score=score, results=d["results"])
        await ask_question(cb.message, state); return
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üìù –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç", callback_data="report:text"),
        InlineKeyboardButton(text="üìÑ PDF —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏", callback_data="report:pdf")]])
    await cb.message.answer(
        f"üèÅ –ö–æ–Ω–µ—Ü! –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: *{score}* –∏–∑ *{len(d['results'])}*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á—ë—Ç–∞:", reply_markup=kb)
    await state.update_data(score=score); await state.set_state(ReportChoice.waiting)

# ‚îÄ‚îÄ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.callback_query(lambda c: c.data == "report:text", ReportChoice.waiting)
async def send_text_report(cb: CallbackQuery, state: FSMContext) -> None:
    d = await state.get_data(); lines=[]
    for n, r in enumerate(d["results"],1):
        q=QUIZZES[d["topic"]][r["idx"]]; mark="‚úÖ" if r["correct"] else "‚ùå"
        right=q["options"][q["correct"]]
        lines.append(f"{mark} *–í–æ–ø—Ä–æ—Å {n}:* {q['question']}\n‚ÄÉ*–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç:* _{right}_")
    await cb.message.answer("\n\n".join(lines)); await state.clear()

# ‚îÄ‚îÄ PDF-–æ—Ç—á—ë—Ç (FSInputFile) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.callback_query(lambda c: c.data == "report:pdf", ReportChoice.waiting)
async def send_pdf_report(cb: CallbackQuery, state: FSMContext) -> None:
    d = await state.get_data(); lines, imgs = [], []
    for n,r in enumerate(d["results"],1):
        q=QUIZZES[d["topic"]][r["idx"]]
        mark="CORRECT" if r["correct"] else "WRONG"
        lines.append(f"{mark}: Question {n}: {q['question']} ‚Äî answer: {q['options'][q['correct']]}")
        imgs.append(str(IMG_DIR / q["image_file"]) if q.get("image_file") else None)
    pdf_path = build_pdf(lines, imgs)
    await cb.message.answer_document(FSInputFile(pdf_path), caption="PDF-report")
    os.remove(pdf_path); await state.clear()

# ‚îÄ‚îÄ –∑–∞–ø—É—Å–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main() -> None:
    if not config.bot_token:
        raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
